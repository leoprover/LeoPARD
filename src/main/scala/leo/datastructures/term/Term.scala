package leo.datastructures.term

import leo.Configuration
import leo.datastructures._
import leo.datastructures.impl.Signature

import scala.language.implicitConversions
import scala.math


/**
 * Abstract interface for terms and operations on them that can be
 * done in the internal language.
 * Terms are generated by
 *
 * {{{s,t ::= i (bound symbol)
 *       | c (constant symbol)
 *       | λ:tau.s (term abstraction)
 *       | s t (term application)
 *       | Λs (type abstraction)
 *       | s tau (type application)}}}
 *
 * where `c` is some symbol (constant) and `tau` is a type (see `Type`).
 *
 * @author Alexander Steen
 * @since 21.05.2014
 * @note Updated 02.06.2014 Cleaned up method set, lambda terms always have types
 * @note Updated 09.06.2014 Added pattern matcher for terms, added definition expansion
 */
abstract class Term extends QuasiOrdered[Term] with Pretty {

  // Predicates on terms
  /** Returns true iff `this` is either a constant or a variable, i.e. `isConstant || isVariable`. */
  def isAtom: Boolean
  def isConstant: Boolean
  def isVariable: Boolean
  def isTermAbs: Boolean
  def isTypeAbs: Boolean
  def isApp: Boolean

  // Locality/Indexing properties of terms
  def indexing: Indexing = if (isIndexed) INDEXED else PLAIN
  def isIndexed: Boolean = TermIndex.contains(this)
  def locality: Locality
  def isLocal: Boolean
  def isGlobal: Boolean = !isLocal

  // Handling def. expansion
  def δ_expandable: Boolean
  def partial_δ_expand(rep: Int): Term
  def full_δ_expand: Term

  def head_δ_expandable: Boolean
  def head_δ_expand: Term

  // Queries on terms
  def ty: Type
  def freeVars: Set[Term]
  def boundVars: Set[Term]
  def looseBounds: Set[Int]
  def occurrences: Map[Term, Set[Position]]
  def symbols: Set[Signature#Key]
  def symbolsOfType(ty: Type) = {
    val sig = Signature.get
    symbols.filter({i => sig(i)._ty == ty})
  }
  def headSymbol: Term
  def headSymbolDepth: Int
  def scopeNumber: (Int,Int)
  def size: Int
  def order: LangOrder

  // Substitutions
  /** Replace every occurrence of `what` in `this` by `by`. */
  def replace(what: Term, by: Term): Term
  def replaceAt(at: Position, by: Term): Term

  def substitute(what: Term, by: Term): Term
  def substitute(what: List[Term], by: List[Term]): Term = {
    require(what.length == by.length, "Substitution list do not match in length.")
    what.zip(by).foldRight(this)({case ((w,b), t:Term) => t.substitute(w,b)})
  }

  def closure(subst: Subst): Term

  protected[datastructures] def instantiateBy(by: Type) = instantiate(1,by)
  protected[datastructures] def instantiate(scope: Int, by: Type): Term
//  protected[internal] def instantiateWith(subst: Subst): Term

  // Other operations
  def compareTo(that: Term): Option[Int] = Configuration.TERM_ORDERING.compare(this, that)
  /** Returns true iff the term is well-typed. */
  def typeCheck: Boolean
  /** Return the β-nf of the term */
  def betaNormalize: Term
  /** Eta-contract term on root level if possible */
  def topEtaContract: Term

  protected[term] def normalize(termSubst: Subst, typeSubst: Subst): Term
  protected[datastructures] def inc(scopeIndex: Int): Term

//  protected[internal] def weakEtaContract(under: Subst, scope: Int): Term
}



/////////////////////////////
// Companion factory object
/////////////////////////////


/**
 * Term Factory object. Only this class is used to create new terms.
 *
 * Current default term implementation: [[leo.datastructures.term.spine.TermImpl]]
 */
object Term extends TermBank {
  import leo.datastructures.term.spine.TermImpl

  // Factory method delegation
  def mkAtom(id: Signature#Key): Term = TermImpl.mkAtom(id)
  def mkBound(t: Type, scope: Int): Term = TermImpl.mkBound(t,scope)
  def mkTermApp(func: Term, arg: Term): Term = TermImpl.mkTermApp(func, arg)
  def mkTermApp(func: Term, args: Seq[Term]): Term = TermImpl.mkTermApp(func, args)
  def mkTermAbs(t: Type, body: Term): Term = TermImpl.mkTermAbs(t, body)
  def mkTypeApp(func: Term, arg: Type): Term = TermImpl.mkTypeApp(func, arg)
  def mkTypeApp(func: Term, args: Seq[Type]): Term = TermImpl.mkTypeApp(func, args)
  def mkTypeAbs(body: Term): Term = TermImpl.mkTypeAbs(body)
  def mkApp(func: Term, args: Seq[Either[Term, Type]]): Term = TermImpl.mkApp(func, args)

  // Term bank method delegation
  val local = TermImpl.local
  def insert(term: Term): Term = TermImpl.insert(term)
  def contains(term: Term): Boolean = TermImpl.contains(term)
  def reset(): Unit = TermImpl.reset()


  // Determine order-subsets of terms

  /** FOF-compatible (unsorted) first order logic subset. */
  def firstOrder(t: Term): Boolean = {
    val polyOps = Set(HOLSignature.eqKey, HOLSignature.neqKey)
    val tys = Set(Signature.get.i, Signature.get.o)

    t match {
      case Forall(ty :::> body) => ty == Signature.get.i && firstOrder(body)
      case Exists(ty :::> body) => ty == Signature.get.i && firstOrder(body)
      case Symbol(key) ∙ sp if polyOps contains key  => sp.head.right.get == Signature.get.i && sp.tail.forall(_.fold(t => t.ty == Signature.get.i && firstOrder(t),_ => false))
      case h ∙ sp  => sp.forall(_.fold(t => tys.contains(t.ty) && firstOrder(t),_ => false))
      case ty :::> body => false
      case TypeLambda(_) => false
      case Bound(ty, sc) => ty == Signature.get.i
      case Symbol(key) => tys.contains(Signature.get(key)._ty)
    }}

  /** Many sorted-first order logic subset. */
  def manySortedFirstOrder(t: Term): Boolean = {
    val polyOps = Set(HOLSignature.eqKey, HOLSignature.neqKey)

    t match {
    case Forall(ty :::> body) => ty.isBaseType && manySortedFirstOrder(body)
    case Exists(ty :::> body) => ty.isBaseType && manySortedFirstOrder(body)
    case Symbol(key) ∙ sp if polyOps contains key  => sp.head.right.get.isBaseType && sp.tail.forall(_.fold(t => t.ty.isBaseType && manySortedFirstOrder(t),_ => false))
    case h ∙ sp  => sp.forall(_.fold(t => t.ty.isBaseType && manySortedFirstOrder(t),_ => false))
    case ty :::> body => false
    case TypeLambda(_) => false
    case Bound(ty, sc) => ty.isBaseType
    case Symbol(key) => Signature.get(key)._ty.isBaseType
  }}

  // Further utility functions
  /** Convert tuple (i,ty) to according de-Bruijn index */
  implicit def intToBoundVar(in: (Int, Type)): Term = mkBound(in._2,in._1)
  /** Convert tuple (i,j) to according de-Bruijn index (where j is a type-de-Bruijn index) */
  implicit def intsToBoundVar(in: (Int, Int)): Term = mkBound(in._2,in._1)
  /** Convert a signature key to its corresponding atomic term representation */
  implicit def keyToAtom(in: Signature#Key): Term = mkAtom(in)

  // Legacy functions type types for statistics, like to be reused sometime
  type TermBankStatistics = (Int, Int, Int, Int, Int, Int, Map[Int, Int])
  def statistics: TermBankStatistics = TermImpl.statistics

  //////////////////////////////////////////
  // Patterns for term structural matching
  //////////////////////////////////////////

  import leo.datastructures.term.spine.Spine.{nil => SNil}
  import leo.datastructures.term.spine.{Atom, BoundIndex, Redex, Root}

  /**
   * Pattern for matching bound symbols in terms (i.e. De-Bruijn-Indices). Usage:
   * {{{
   * t match {
   *  case Bound(ty,scope) => println("Matched bound symbol of lambda-scope "
   *                                  + scope.toString + " with type "+ ty.pretty)
   *  case _               => println("something else")
   * }
   * }}}
   */
  object Bound {
    def unapply(t: Term): Option[(Type, Int)] = t match {
      case naive.BoundNode(ty,scope) => Some((ty,scope))
      case spine.Root(BoundIndex(ty, scope), SNil) => Some((ty, scope))
      case _ => None
    }
  }

  /**
   * Pattern for matching constant symbols in terms (i.e. symbols in signature). Usage:
   * {{{
   * t match {
   *  case Symbol(constantKey) => println("Matched constant symbol "+ constantKey.toString)
   *  case _                   => println("something else")
   * }
   * }}}
   */
  object Symbol {

    def unapply(t: Term): Option[Signature#Key] = t match {
      case naive.SymbolNode(k)         => Some(k)
      case spine.Root(Atom(k),SNil) => Some(k)
      case _ => None
    }
  }

  /**
   * Pattern for matching (term) applications in terms (i.e. terms of form `(s t)`). Usage:
   * {{{
   * t match {
   *  case s @@@ t => println("Matched application. Left: " + s.pretty
   *                                            + " Right: " + t.pretty)
   *  case _       => println("something else")
   * }
   * }}}
   */
  object @@@ extends HOLBinaryConnective {
    val key = Integer.MIN_VALUE // just for fun!
    override def unapply(t: Term): Option[(Term,Term)] = t match {
        case naive.ApplicationNode(l,r) => Some((l,r))
        case _ => None
      }
    override def apply(left: Term, right: Term): Term = Term.mkTermApp(left,right)
  }

  /**
   * Pattern for matching a root/redex term (i.e. terms of form `(f ∙ S)`). Usage:
   * {{{
   * t match {
   *  case s ∙ args => println("Matched application. Head: " + s.pretty
   *                                            + " Args: " + args.map.fold(_.pretty,_.pretty)).toString
   *  case _       => println("something else")
   * }
   * }}}
   */
  object ∙ {
    def unapply(t: Term): Option[(Term, Seq[Either[Term, Type]])] = t match {
      case Root(h, sp) => Some((spine.TermImpl.headToTerm(h), sp.asTerms))
      case Redex(expr, sp) => Some((expr, sp.asTerms))
      case _ => None
    }

    def apply(left: Term, right: Seq[Either[Term, Type]]): Term = spine.TermImpl.mkApp(left, right)
  }

  /**
   * Pattern for matching type applications in terms (i.e. terms of form `(s ty)` where `ty` is a type). Usage:
   * {{{
   * t match {
   *  case s :::: ty => println("Matched type application. Left: " + s.pretty
   *                                                  + " Right: " + ty.pretty)
   *  case _         => println("something else")
   * }
   * }}}
   */
  object @@@@ {

    def unapply(t: Term): Option[(Term,Type)] = t match {
      case naive.TypeApplicationNode(l,r) => Some((l,r))
      case _ => None
    }
  }

  /**
   * Pattern for matching (term) abstractions in terms (i.e. terms of form `(\(ty)(s))` where `ty` is a type). Usage:
   * {{{
   * t match {
   *  case ty :::> s => println("Matched abstraction. Type of parameter: " + ty.pretty
   *                                                           + " Body: " + s.pretty)
   *  case _         => println("something else")
   * }
   * }}}
   */
  object :::> extends Function2[Type, Term, Term] {

    def unapply(t: Term): Option[(Type,Term)] = t match {
      case naive.AbstractionNode(ty,body) => Some((ty,body))
      case spine.TermAbstr(ty, body)      => Some((ty, body))
      case _ => None
    }

    /** Construct abstraction λty.body */
    override def apply(ty: Type, body: Term): Term = Term.mkTermAbs(ty, body)
  }

  /**
   * Pattern for matching (type) abstractions in terms (i.e. terms of form `/\(s)`). Usage:
   * {{{
   * t match {
   *  case TypeLambda(s) => println("Matched type abstraction. Body: " + s.pretty)
   *  case _             => println("something else")
   * }
   * }}}
   */
  object TypeLambda {

    def unapply(t: Term): Option[Term] = t match {
      case naive.TypeAbstractionNode(body) => Some(body)
      case spine.TypeAbstr(body)           => Some(body)
      case _ => None
    }
  }
}

